
Assignment - 7 A Job Ready Bootcamp in C++, DSA and IOT MySirG

Iterative Control Statements (Part - 2)
1. Write a program to find the Nth term of the Fibonnaci series.

int main()
{
    int f0=0,f1=1,i,n,temp;
    printf("enter the value of n\n");
    scanf("%d",&n);
     for(i=0;i<n-1;i++)
     {
         temp=f1;
         f1=f0+f1;
         f0=temp;

     }
     printf("%d is the %dth term of the fibonnaci series",f0,n);
     return 0;
}

2. Write a program to print first N terms of Fibonacci series

int main()
{
    int f0=0,f1=1,i,n,temp;
    printf("enter the value of n\n");
    scanf("%d",&n);
    printf("%d\t",f0);
     for(i=0;i<=n-2;i++)
     {
         temp=f1;
         f1=f0+f1;
         f0=temp;
         printf("%d\t",f0);

     }
     return 0;
}

3. Write a program to check whether a given number is there in the Fibonacci
series or not.

int main()
{
    int f0=0,f1=1,i,n,temp;
    printf("enter the value of n\n");
    scanf("%d",&n);
     for(i=0;f1<n;i++)
     {
         temp=f1;
         f1=f0+f1;
         f0=temp;
          /*if(f1==n)
          {
              break;
          }*/
     }
     if(f1==n)
        {
           printf("%d is there in the fibonnaci series",n);
        }
    else
        {
           printf("%d is not there in the fibonnaci series",n);
        }

     return 0;
}

4. Write a program to calculate HCF of two numbers

#include<stdio.h>
int main()
{
int low,x,hcf=1,m,n;
printf("enter 2 numbers\n");
scanf("%d%d",&m,&n);
if(m<n){low=m;}else{low=n;}
for(x=2;x<=low;)
 {
  if(m%x==0&&n%x==0)
  {
     hcf=hcf*x;
     m=m/x;
     n=n/x;
     x=2;
  }
else{x++;}

if(m<n)
{low=m;}
else
{low=n;}
}

printf("%d is their hcf",hcf);
return 0;
}

5. Write a program to check whether two given numbers are co-prime
numbers or not

int main()
{
int m,n,low,x,hcf=1;
printf("enter 2 numbers\n");
scanf("%d%d",&m,&n);
if(m<n){low=m;}else{low=n;}
for(x=2;x<=low;)
 {
  if(m%x==0&&n%x==0)
  {
     hcf=hcf*x;
     m=m/x;
     n=n/x;
     x=2;
  }
else{x++;}
  if(m<n)
  {low=m;}
  else{low=n;}
}
if(hcf==1)
{printf("the numbers are co-prime");}
else
{printf("the numbers are not co-prime");}
return 0;
}
6. Write a program to print all Prime numbers under 100
int main()
{
int m,n;
printf("2\t");
for(n=3;n<100;n++)
{
  for(m=2;m<n;m++)
  {
   if(n%m==0)
   {break;}
  }
  if(m==n)
  {printf("%d\t",m);}
}
return 0;
}


7. Write a program to print all Prime numbers between two given numbers
int main()
{
int m,n,i,j;
printf("enter 2 numbers\n");
scanf("%d%d",&m,&n);
printf("prime numbers between %d and %d\n",m,n);
for(i=m+1;i<n;i++)
{
    for(j=2;j<i;j++)
    {
        if(i%j==0)
        {
            break;
        }
    }
    if(i==j)
        {
            printf("%d\t",i);
        }

}
return 0;
}

8. Write a program to find next Prime number of a given number

int main()
{int n,i,j;
printf("enter a number\n");
scanf("%d",&n);
for(i=n+1;;i++)
{
  for(j=2;j<i;j++)
  {
    if(i%j==0)
    break;
  }
  if(i==j)
  {
   printf("%d is the next prime number",i);
   break;
  }

}
 return 0;
}

9. Write a program to check whether a given number is an Armstrong number
or not

int main()
{
int m,n,arm=0,dig=0,d=1,x;
printf("enter a number\n");
scanf("%d",&n);
m=n;

for(;n;n=n/10)
      {
        dig++;
       }
       x=dig;
       n=m;


  for(;n;n=n/10)
    {dig=x;
      d=1;
        while(dig)
        {
          d=(n%10)*d;
           dig--;

         }
    arm=d+arm;

    }
if(arm==m)
  {printf("%d is an armstromg number",m);}
else
  {printf("%d is not an armstromg number",m);}

return 0;
}



10. Write a program to print all Armstrong numbers under 1000

int main()
{
int m,n,arm=0,dig=0,d=1,x;
for(n=1;n<1000;n++)
{arm=0;
m=n;
for(;n;n=n/10)
      {
        dig++;
       }
       x=dig;
       n=m;
  for(;n;n=n/10)
    {dig=x;
      d=1;
        while(dig)
        {
          d=(n%10)*d;
           dig--;

         }
    arm=d+arm;

    }
    if(arm==m)
  {printf("%d\t",m);}
  n=m;
}
return 0;
}

